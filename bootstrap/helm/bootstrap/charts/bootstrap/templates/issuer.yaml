{{ if index $.Values "cert-manager" "enabled" }}
{{   if empty .Values.acmeServer }}
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
spec:
  selfSigned: {}
{{   else }}
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: {{ .Values.ownerEmail }}
    server: {{ .Values.acmeServer }}
    {{ if .Values.acmeEAB.kid }}
    externalAccountBinding:
      keyID: {{ .Values.acmeEAB.kid }}
      keySecretRef:
        name: acme-eab-secret
        key: eab-secret
      keyAlgorithm: HS256
    {{ end }}
    privateKeySecretRef:
      # Secret resource that will be used to store the account's private key.
      name: cert-manager-key
    # Add a single challenge solver, dns01, configured using the appropriate cloud dns setup
    solvers:
    - dns01:
      {{ .Values.dnsSolver | toYaml | nindent 8 }}
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: {{ .Values.ownerEmail }}
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource that will be used to store the account's private key.
      name: cert-manager-staging-key
    # Add a single challenge solver, HTTP01 using nginx
    solvers:
    - http01:
        ingress:
          class: nginx
{{   end }}
{{ end }}
